{% doc %}
  @prompt
    Build an interactive, horizontally scrollable product video slider block for Shopify OS 2.0. Each video is linked to a product, displays product info, and has an Add to Cart button (with variant picker if needed). Block should auto-populate with selected products, be fully responsive, accessible, and support fast AJAX add-to-cart. Provide merchant-facing settings for customization.

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-video-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    background-color: {{ block.settings.background_color }};
    padding: {{ block.settings.section_padding }}px 0;
  }

  .ai-video-slider__header-{{ ai_gen_id }} {
    text-align: center;
    margin-bottom: 32px;
    padding: 0 20px;
  }

  .ai-video-slider__title-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    font-size: {{ block.settings.title_size }}px;
    margin: 0 0 8px;
  }

  .ai-video-slider__subtitle-{{ ai_gen_id }} {
    color: {{ block.settings.text_color }};
    opacity: 0.8;
    margin: 0;
  }

  .ai-video-slider__container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
  }

  .ai-video-slider__track-{{ ai_gen_id }} {
    display: flex;
    gap: {{ block.settings.card_gap }}px;
    padding: 0 20px;
    overflow-x: auto;
    scroll-behavior: smooth;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .ai-video-slider__track-{{ ai_gen_id }}::-webkit-scrollbar {
    display: none;
  }

  .ai-video-slider__card-{{ ai_gen_id }} {
    flex: 0 0 {{ block.settings.card_width }}px;
    background-color: {{ block.settings.card_background }};
    border-radius: {{ block.settings.card_border_radius }}px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease;
  }

  .ai-video-slider__card-{{ ai_gen_id }}:hover {
    transform: translateY(-4px);
  }

  .ai-video-slider__video-container-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    height: {{ block.settings.video_height }}px;
    background-color: #000;
    overflow: hidden;
  }

  .ai-video-slider__video-{{ ai_gen_id }} {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .ai-video-slider__play-button-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .ai-video-slider__play-button-{{ ai_gen_id }}:hover {
    background-color: rgba(255, 255, 255, 1);
    transform: translate(-50%, -50%) scale(1.1);
  }

  .ai-video-slider__play-icon-{{ ai_gen_id }} {
    width: 24px;
    height: 24px;
    margin-left: 3px;
  }

  .ai-video-slider__content-{{ ai_gen_id }} {
    padding: 20px;
  }

  .ai-video-slider__product-title-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: 18px;
    font-weight: 600;
    margin: 0 0 8px;
    line-height: 1.3;
  }

  .ai-video-slider__product-price-{{ ai_gen_id }} {
    color: {{ block.settings.card_text_color }};
    font-size: 16px;
    margin: 0 0 16px;
  }

  .ai-video-slider__variant-selector-{{ ai_gen_id }} {
    margin-bottom: 16px;
  }

  .ai-video-slider__variant-label-{{ ai_gen_id }} {
    display: block;
    color: {{ block.settings.card_text_color }};
    font-size: 14px;
    margin-bottom: 8px;
  }

  .ai-video-slider__variant-select-{{ ai_gen_id }} {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    background-color: #fff;
    font-size: 14px;
  }

  .ai-video-slider__add-to-cart-{{ ai_gen_id }} {
    width: 100%;
    padding: 12px 20px;
    background-color: {{ block.settings.button_color }};
    color: {{ block.settings.button_text_color }};
    border: none;
    border-radius: {{ block.settings.button_border_radius }}px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .ai-video-slider__add-to-cart-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.button_hover_color }};
    transform: translateY(-1px);
  }

  .ai-video-slider__add-to-cart-{{ ai_gen_id }}:disabled {
    background-color: #ccc;
    cursor: not-allowed;
    transform: none;
  }

  .ai-video-slider__nav-{{ ai_gen_id }} {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    background-color: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 2;
  }

  .ai-video-slider__nav-{{ ai_gen_id }}:hover {
    background-color: rgba(255, 255, 255, 1);
    transform: translateY(-50%) scale(1.1);
  }

  .ai-video-slider__nav--prev-{{ ai_gen_id }} {
    left: 10px;
  }

  .ai-video-slider__nav--next-{{ ai_gen_id }} {
    right: 10px;
  }

  .ai-video-slider__nav-icon-{{ ai_gen_id }} {
    width: 20px;
    height: 20px;
  }

  .ai-video-slider__loading-{{ ai_gen_id }} {
    display: none;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: {{ block.settings.card_text_color }};
  }

  .ai-video-slider__success-{{ ai_gen_id }} {
    position: fixed;
    top: 20px;
    right: 20px;
    background-color: #4caf50;
    color: white;
    padding: 12px 20px;
    border-radius: 4px;
    z-index: 1000;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s ease;
  }

  .ai-video-slider__success-{{ ai_gen_id }}.show {
    opacity: 1;
    transform: translateX(0);
  }

  @media screen and (max-width: 768px) {
    .ai-video-slider__card-{{ ai_gen_id }} {
      flex: 0 0 280px;
    }

    .ai-video-slider__video-container-{{ ai_gen_id }} {
      height: 200px;
    }

    .ai-video-slider__nav-{{ ai_gen_id }} {
      display: none;
    }

    .ai-video-slider__track-{{ ai_gen_id }} {
      padding: 0 16px;
    }
  }

  @media screen and (max-width: 480px) {
    .ai-video-slider__card-{{ ai_gen_id }} {
      flex: 0 0 250px;
    }

    .ai-video-slider__content-{{ ai_gen_id }} {
      padding: 16px;
    }
  }
{% endstyle %}

<video-slider-{{ ai_gen_id }}
  class="ai-video-slider-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.title != blank or block.settings.subtitle != blank %}
    <div class="ai-video-slider__header-{{ ai_gen_id }}">
      {% if block.settings.title != blank %}
        <h2 class="ai-video-slider__title-{{ ai_gen_id }}">{{ block.settings.title }}</h2>
      {% endif %}
      {% if block.settings.subtitle != blank %}
        <p class="ai-video-slider__subtitle-{{ ai_gen_id }}">{{ block.settings.subtitle }}</p>
      {% endif %}
    </div>
  {% endif %}

  <div class="ai-video-slider__container-{{ ai_gen_id }}">
    <button
      class="ai-video-slider__nav-{{ ai_gen_id }} ai-video-slider__nav--prev-{{ ai_gen_id }}"
      aria-label="Previous video"
      type="button"
    >
      <svg class="ai-video-slider__nav-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="15,18 9,12 15,6"></polyline>
      </svg>
    </button>

    <div class="ai-video-slider__track-{{ ai_gen_id }}" role="region" aria-label="Product videos">
      {% for i in (1..6) %}
        {% assign product_key = 'product_' | append: i %}
        {% assign video_key = 'video_' | append: i %}
        {% assign product = block.settings[product_key] %}
        {% assign video = block.settings[video_key] %}

        {% if product != blank and video != blank %}
          <div class="ai-video-slider__card-{{ ai_gen_id }}" data-product-id="{{ product.id }}">
            <div class="ai-video-slider__video-container-{{ ai_gen_id }}">
              <video
                class="ai-video-slider__video-{{ ai_gen_id }}"
                muted
                loop
                preload="metadata"
                poster="{{ video | img_url: '600x400' }}"
                data-video-src="{{ video }}"
              >
                <source src="{{ video }}" type="video/mp4">
              </video>
              <button
                class="ai-video-slider__play-button-{{ ai_gen_id }}"
                aria-label="Play video for {{ product.title }}"
                type="button"
              >
                <svg class="ai-video-slider__play-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="currentColor">
                  <polygon points="5,3 19,12 5,21"></polygon>
                </svg>
              </button>
            </div>

            <div class="ai-video-slider__content-{{ ai_gen_id }}">
              <h3 class="ai-video-slider__product-title-{{ ai_gen_id }}">{{ product.title }}</h3>
              <div class="ai-video-slider__product-price-{{ ai_gen_id }}">
                {% if product.compare_at_price > product.price %}
                  <span style="text-decoration: line-through; opacity: 0.7;">{{ product.compare_at_price | money }}</span><span style="color: #e74c3c; font-weight: 600;">{{ product.price | money }}</span>
                {% else %}
                  <span>{{ product.price | money }}</span>
                {% endif %}
              </div>

              {% if product.variants.size > 1 %}
                <div class="ai-video-slider__variant-selector-{{ ai_gen_id }}">
                  <label class="ai-video-slider__variant-label-{{ ai_gen_id }}" for="variant-{{ product.id }}-{{ ai_gen_id }}">
                    Variant
                  </label>
                  <select
                    class="ai-video-slider__variant-select-{{ ai_gen_id }}"
                    id="variant-{{ product.id }}-{{ ai_gen_id }}"
                    data-product-id="{{ product.id }}">
                    {% for variant in product.variants %}
                      <option
                        value="{{ variant.id }}"
                        {% if variant == product.selected_or_first_available_variant %}selected{% endif %}
                        {% unless variant.available %}disabled{% endunless %}
                      >
                        {{ variant.title }}
                        {% unless variant.available %} - Sold out{% endunless %}
                      </option>
                    {% endfor %}
                  </select>
                </div>
              {% endif %}

              <button
                class="ai-video-slider__add-to-cart-{{ ai_gen_id }}"
                data-product-id="{{ product.id }}"
                data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                {% unless product.selected_or_first_available_variant.available %}disabled{% endunless %}
                type="button"
              >
                {% if product.selected_or_first_available_variant.available %}
                  Add to Cart
                {% else %}
                  Sold Out
                {% endif %}
              </button>
            </div>

            <div class="ai-video-slider__loading-{{ ai_gen_id }}">Adding to cart...</div>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <button
      class="ai-video-slider__nav-{{ ai_gen_id }} ai-video-slider__nav--next-{{ ai_gen_id }}"
      aria-label="Next video"
      type="button"
    >
      <svg class="ai-video-slider__nav-icon-{{ ai_gen_id }}" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polyline points="9,18 15,12 9,6"></polyline>
      </svg>
    </button>
  </div>

  <div class="ai-video-slider__success-{{ ai_gen_id }}">
    Product added to cart!
  </div>
</video-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class VideoSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.track = this.querySelector('.ai-video-slider__track-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-video-slider__nav--prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-video-slider__nav--next-{{ ai_gen_id }}');
        this.cards = this.querySelectorAll('.ai-video-slider__card-{{ ai_gen_id }}');
        this.videos = this.querySelectorAll('.ai-video-slider__video-{{ ai_gen_id }}');
        this.playButtons = this.querySelectorAll('.ai-video-slider__play-button-{{ ai_gen_id }}');
        this.addToCartButtons = this.querySelectorAll('.ai-video-slider__add-to-cart-{{ ai_gen_id }}');
        this.variantSelects = this.querySelectorAll('.ai-video-slider__variant-select-{{ ai_gen_id }}');
        this.successMessage = this.querySelector('.ai-video-slider__success-{{ ai_gen_id }}');
        this.currentVideoPlaying = null;
      }

      connectedCallback() {
        this.setupNavigation();
        this.setupVideoControls();
        this.setupAddToCart();
        this.setupVariantSelectors();
        this.setupIntersectionObserver();
      }

      setupNavigation() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.scrollPrev());
        }
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.scrollNext());
        }

        this.track.addEventListener('scroll', () => this.updateNavButtons());
        this.updateNavButtons();
      }

      scrollPrev() {
        const cardWidth = this.cards[0]?.offsetWidth || 300;
        const gap = parseInt(getComputedStyle(this.track).gap) || 16;
        this.track.scrollBy({
          left: -(cardWidth + gap),
          behavior: 'smooth'
        });
      }

      scrollNext() {
        const cardWidth = this.cards[0]?.offsetWidth || 300;
        const gap = parseInt(getComputedStyle(this.track).gap) || 16;
        this.track.scrollBy({
          left: cardWidth + gap,
          behavior: 'smooth'
        });
      }

      updateNavButtons() {
        if (!this.prevButton || !this.nextButton) return;

        const isAtStart = this.track.scrollLeft <= 0;
        const isAtEnd = this.track.scrollLeft >= this.track.scrollWidth - this.track.clientWidth - 1;

        this.prevButton.style.opacity = isAtStart ? '0.5' : '1';
        this.nextButton.style.opacity = isAtEnd ? '0.5' : '1';
        this.prevButton.disabled = isAtStart;
        this.nextButton.disabled = isAtEnd;
      }

      setupVideoControls() {
        this.playButtons.forEach((button, index) => {
          const video = this.videos[index];
          if (!video) return;

          button.addEventListener('click', () => {
            if (this.currentVideoPlaying && this.currentVideoPlaying !== video) {
              this.pauseVideo(this.currentVideoPlaying);
            }

            if (video.paused) {
              this.playVideo(video, button);
            } else {
              this.pauseVideo(video, button);
            }
          });

          video.addEventListener('ended', () => {
            this.pauseVideo(video, button);
          });
        });
      }

      playVideo(video, button) {
        video.play();
        this.currentVideoPlaying = video;
        button.style.opacity = '0';
        button.setAttribute('aria-label', 'Pause video');
      }

      pauseVideo(video, button = null) {
        video.pause();
        if (this.currentVideoPlaying === video) {
          this.currentVideoPlaying = null;
        }
        if (button) {
          button.style.opacity = '1';
          button.setAttribute('aria-label', 'Play video');
        } else {
          const playButton = video.parentElement.querySelector('.ai-video-slider__play-button-{{ ai_gen_id }}');
          if (playButton) {
            playButton.style.opacity = '1';
            playButton.setAttribute('aria-label', 'Play video');
          }
        }
      }

      setupVariantSelectors() {
        this.variantSelects.forEach(select => {
          select.addEventListener('change', (e) => {
            const productId = e.target.dataset.productId;
            const variantId = e.target.value;
            const addToCartButton = this.querySelector(`[data-product-id="${productId}"].ai-video-slider__add-to-cart-{{ ai_gen_id }}`);
            
            if (addToCartButton) {
              addToCartButton.dataset.variantId = variantId;
              
              const selectedOption = e.target.selectedOptions[0];
              const isAvailable = !selectedOption.disabled;
              
              addToCartButton.disabled = !isAvailable;
              addToCartButton.textContent = isAvailable ? 'Add to Cart' : 'Sold Out';
            }
          });
        });
      }

      setupAddToCart() {
        this.addToCartButtons.forEach(button => {
          button.addEventListener('click', async (e) => {
            e.preventDefault();
            
            const variantId = button.dataset.variantId;
            const loadingElement = button.parentElement.querySelector('.ai-video-slider__loading-{{ ai_gen_id }}');
            
            if (!variantId || button.disabled) return;

            button.disabled = true;
            button.style.opacity = '0.5';
            loadingElement.style.display = 'block';

            try {
              const response = await fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  id: variantId,
                  quantity: 1
                })
              });

              if (response.ok) {
                this.showSuccessMessage();
                this.updateCartCount();
              } else {
                throw new Error('Failed to add to cart');
              }
            } catch (error) {
              console.error('Error adding to cart:', error);
              alert('Failed to add product to cart. Please try again.');
            } finally {
              button.disabled = false;
              button.style.opacity = '1';
              loadingElement.style.display = 'none';
            }
          });
        });
      }

      showSuccessMessage() {
        this.successMessage.classList.add('show');
        setTimeout(() => {
          this.successMessage.classList.remove('show');
        }, 3000);
      }

      updateCartCount() {
        fetch('/cart.js')
          .then(response => response.json())
          .then(cart => {
            document.dispatchEvent(new CustomEvent('cart:updated', {
              detail: { cart }
            }));
          });
      }

      setupIntersectionObserver() {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (!entry.isIntersecting) {
              const video = entry.target.querySelector('.ai-video-slider__video-{{ ai_gen_id }}');
              if (video && !video.paused) {
                this.pauseVideo(video);
              }
            }
          });
        }, {
          threshold: 0.5
        });

        this.cards.forEach(card => {
          observer.observe(card);
        });
      }
    }

    customElements.define('video-slider-{{ ai_gen_id }}', VideoSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Product Video Slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Featured Products"
    },
    {
      "type": "text",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Discover our latest collection"
    },
    {
      "type": "header",
      "content": "Product 1"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_1",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Product 2"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_2",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Product 3"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_3",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Product 4"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_4",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Product 5"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_5",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Product 6"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product"
    },
    {
      "type": "video",
      "id": "video_6",
      "label": "Product video"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "card_width",
      "min": 250,
      "max": 400,
      "step": 10,
      "unit": "px",
      "label": "Card width",
      "default": 320
    },
    {
      "type": "range",
      "id": "video_height",
      "min": 180,
      "max": 300,
      "step": 10,
      "unit": "px",
      "label": "Video height",
      "default": 240
    },
    {
      "type": "range",
      "id": "card_gap",
      "min": 8,
      "max": 32,
      "step": 4,
      "unit": "px",
      "label": "Card spacing",
      "default": 16
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 80,
      "step": 4,
      "unit": "px",
      "label": "Section padding",
      "default": 40
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 20,
      "max": 48,
      "step": 2,
      "unit": "px",
      "label": "Title size",
      "default": 32
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#f8f9fa"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card background",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "card_text_color",
      "label": "Card text color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#333333"
    },
    {
      "type": "header",
      "content": "Style"
    },
    {
      "type": "range",
      "id": "card_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Card border radius",
      "default": 12
    },
    {
      "type": "range",
      "id": "button_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Button border radius",
      "default": 6
    }
  ],
  "presets": [
    {
      "name": "Product Video Slider"
    }
  ]
}
{% endschema %}